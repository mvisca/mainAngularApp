import { Injectable } from '@angular/core';



@Injectable({
    providedIn: 'root'
})
export class Lex1313Service {
    


    public works: string = '1313 service works!!';
    
    
    // _permission permission and setPermission are used to track the state of permission to access gelocation
    private _permission!: PermissionStatus;
    
    get permission() {
        return this._permission;
    }
    
    setPermission( value: PermissionStatus ):void {
        this._permission = value;
    }
        
    
    constructor() {
        this.getUserLocation();
    }
    
    // userLocation is used to store the navigator geolocation
    public userLocation!: [number, number];
    
    
    public async getUserLocation(): Promise<[number, number]> {

        try {
            
            await navigator.permissions.query({ name: 'geolocation' })
                .then( resp => { this.setPermission( resp ) });

            console.log('permission', this.permission.state);
            if ( this.permission.state === 'granted' ) {
            
                await navigator.geolocation.getCurrentPosition(
                    ( { coords } ) => {
                        
                        this.userLocation = [ coords.longitude, coords.latitude ];
                        
                        console.log(this.userLocation, 'from getUserLocation()');
                        
                        return this.userLocation;
                    },
                    ( err ) => {
                        alert('No se obtuvo la geolocalizaci√≥n');
                        console.log(err);
                        throw new Error('Geoloc not obtained, even persission is granted.')
                    }
                );
                
            } else {
                throw new Error('Permission not granted');
            };
        }
        catch ( err ) {
            console.log('No permission or browser-device communication error');
            alert('No permission or browser-device communication error');
            throw new Error('No permission or browser-device communication error');
        }
        
        return [0,0];
    }
}
